package com.java8.test.lambda.lambda2;

import java.io.PrintStream;
import java.util.Comparator;
import java.util.function.BiPredicate;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.function.Supplier;

import com.java8.test.lambda.lambda.Employee;
import org.junit.Test;


/*
 * ???????????Lambda ???§Ö??????§Ù?????????????????????¨¢?????????"
 * 			(??????????Lambda ?????????????????
 * ????????????????
 * 			??????????????
 * 			???? ?????????
 * 			?????????????
 *  ??? Lambda ???§Ö??¡Â?????????§Ò?????????????????????§Ô??????????§Ò?????????????????
 *        ??Lambda ?????§Ò??§Ö?????????????????????????????????????????????????????????????ClassName ???? method
 *
 * ???????????
 * 			?????  ClassName ????new
 *   ??????????????????????§Ò???????????§Ö???????????§Ò???????
 *
 * ?????????
 * 			????? Type::new
 *
 * */
public class TestMethodRef {

    @Test
    public void test3() {
        Function<Integer, String[]> fun = (x) -> new String[x];
        String[] strs = fun.apply(10);
        System.out.println(strs.length);

        Function<Integer, String[]> fun1 = String[]::new;
        String[] strs2 = fun1.apply(20);
        System.out.println(strs2.length);
    }

    @Test
    public void test2() {
        Supplier<Employee> sup = () -> new Employee();
        Employee em = sup.get();

        //?????????¡Â??
        Supplier<Employee> sup2 = Employee::new;
        System.out.println(sup2.get());

        //??????????????
        Function<String, Employee> fun = Employee::new;
        System.out.println(fun.apply("§³????"));

    }

    @Test
    public void test1() {
        Consumer<String> con = (x) -> System.out.println(x);

        PrintStream ps = System.out;
        Consumer<String> con1 = ps::println;
        con1.accept("abcef");

        Comparator<Integer> com = (x, y) -> Integer.compare(x, y);
        Comparator<Integer> com1 = Integer::compare;

        BiPredicate<String, String> bp = (x, y) -> x.equals(y);
        BiPredicate<String, String> bp2 = String::equals;

    }
}
